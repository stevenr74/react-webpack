{"version":3,"file":"CalendarCheck.esm.js","sources":["../../src/icons/CalendarCheck.tsx"],"sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      strokeWidth=\"24\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"176\"\n      y1=\"20\"\n      x2=\"176\"\n      y2=\"40\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"80\"\n      y1=\"20\"\n      x2=\"80\"\n      y2=\"40\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"40\"\n      y1=\"88\"\n      x2=\"216\"\n      y2=\"88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <polyline\n      points=\"163.995 127.995 117.328 171.995 91.995 147.995\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <path d=\"M40,88H216V48a8,8,0,0,0-8-8H48a8,8,0,0,0-8,8Z\" opacity=\"0.2\" />\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"176\"\n      y1=\"24\"\n      x2=\"176\"\n      y2=\"56\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"80\"\n      y1=\"24\"\n      x2=\"80\"\n      y2=\"56\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"40\"\n      y1=\"88\"\n      x2=\"216\"\n      y2=\"88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"163.995 127.995 117.328 171.995 91.995 147.995\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M207.99414,31.99707h-24v-8a8,8,0,0,0-16,0v8h-80v-8a8,8,0,1,0-16,0v8h-24a16.01583,16.01583,0,0,0-16,16v160a16.01583,16.01583,0,0,0,16,16h160a16.01582,16.01582,0,0,0,16-16v-160A16.01582,16.01582,0,0,0,207.99414,31.99707ZM169.48242,133.81543l-46.6665,44a7.99905,7.99905,0,0,1-10.98975-.0127l-25.33349-24a8,8,0,1,1,11.0039-11.61523l19.84424,18.7998,41.166-38.8125a7.99949,7.99949,0,1,1,10.97558,11.64063Zm38.51172-53.81836h-160v-32h24v8a8,8,0,0,0,16,0v-8h80v8a8,8,0,1,0,16,0v-8h24Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      strokeWidth=\"12\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"176\"\n      y1=\"24\"\n      x2=\"176\"\n      y2=\"56\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"80\"\n      y1=\"24\"\n      x2=\"80\"\n      y2=\"56\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"40\"\n      y1=\"88\"\n      x2=\"216\"\n      y2=\"88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <polyline\n      points=\"163.995 127.995 117.328 171.995 91.995 147.995\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      strokeWidth=\"8\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"176\"\n      y1=\"24\"\n      x2=\"176\"\n      y2=\"56\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"80\"\n      y1=\"24\"\n      x2=\"80\"\n      y2=\"56\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"40\"\n      y1=\"88\"\n      x2=\"216\"\n      y2=\"88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <polyline\n      points=\"163.995 127.995 117.328 171.995 91.995 147.995\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"176\"\n      y1=\"24\"\n      x2=\"176\"\n      y2=\"56\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"80\"\n      y1=\"24\"\n      x2=\"80\"\n      y2=\"56\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"40\"\n      y1=\"88\"\n      x2=\"216\"\n      y2=\"88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"163.995 127.995 117.328 171.995 91.995 147.995\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst CalendarCheck = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nCalendarCheck.displayName = \"CalendarCheck\";\n\nexport default CalendarCheck;\n"],"names":["pathsByWeight","Map","set","color","React","x","y","width","height","rx","strokeWidth","stroke","strokeLinecap","strokeLinejoin","fill","x1","y1","x2","y2","points","d","opacity","renderPath","weight","renderPathForWeight","CalendarCheck","forwardRef","props","ref","IconBase","displayName"],"mappings":"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"}